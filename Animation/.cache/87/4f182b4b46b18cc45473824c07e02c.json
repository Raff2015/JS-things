{"id":"node_modules/ansicolor/build/ansicolor.js","dependencies":[{"name":"C:\\Users\\Raff_8\\Desktop\\Complete Intro to Web Development -v2 Brian Holt\\Animation\\package.json","includedInParent":true,"mtime":1588558791670},{"name":"C:\\Users\\Raff_8\\Desktop\\Complete Intro to Web Development -v2 Brian Holt\\Animation\\node_modules\\ansicolor\\package.json","includedInParent":true,"mtime":1588558757080},{"name":"C:\\Users\\Raff_8\\Desktop\\Complete Intro to Web Development -v2 Brian Holt\\Animation\\node_modules\\ansicolor\\.babelrc","includedInParent":true,"mtime":1507316743000}],"generated":{"js":"\"use strict\";\n\n/*  ------------------------------------------------------------------------ */\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\nconst O = Object;\n\n/*  See https://misc.flogisoft.com/bash/tip_colors_and_formatting\n    ------------------------------------------------------------------------ */\n\nconst colorCodes = ['black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'lightGray', '', 'default'],\n      colorCodesLight = ['darkGray', 'lightRed', 'lightGreen', 'lightYellow', 'lightBlue', 'lightMagenta', 'lightCyan', 'white', ''],\n      styleCodes = ['', 'bright', 'dim', 'italic', 'underline', '', '', 'inverse'],\n      asBright = { 'red': 'lightRed',\n    'green': 'lightGreen',\n    'yellow': 'lightYellow',\n    'blue': 'lightBlue',\n    'magenta': 'lightMagenta',\n    'cyan': 'lightCyan',\n    'black': 'darkGray',\n    'lightGray': 'white' },\n      types = { 0: 'style',\n    2: 'unstyle',\n    3: 'color',\n    9: 'colorLight',\n    4: 'bgColor',\n    10: 'bgColorLight' },\n      subtypes = { color: colorCodes,\n    colorLight: colorCodesLight,\n    bgColor: colorCodes,\n    bgColorLight: colorCodesLight,\n    style: styleCodes,\n    unstyle: styleCodes\n\n    /*  ------------------------------------------------------------------------ */\n\n};const clean = obj => {\n    for (const k in obj) {\n        if (!obj[k]) {\n            delete obj[k];\n        }\n    }\n    return O.keys(obj).length === 0 ? undefined : obj;\n};\n\n/*  ------------------------------------------------------------------------ */\n\nclass Color {\n\n    constructor(background, name, brightness) {\n\n        this.background = background;\n        this.name = name;\n        this.brightness = brightness;\n    }\n\n    get inverse() {\n        return new Color(!this.background, this.name || (this.background ? 'black' : 'white'), this.brightness);\n    }\n\n    get clean() {\n        return clean({ name: this.name === 'default' ? '' : this.name,\n            bright: this.brightness === Code.bright,\n            dim: this.brightness === Code.dim });\n    }\n\n    defaultBrightness(value) {\n\n        return new Color(this.background, this.name, this.brightness || value);\n    }\n\n    css(inverted) {\n\n        const color = inverted ? this.inverse : this;\n\n        const rgbName = color.brightness === Code.bright && asBright[color.name] || color.name;\n\n        const prop = color.background ? 'background:' : 'color:',\n              rgb = Colors.rgb[rgbName],\n              alpha = this.brightness === Code.dim ? 0.5 : 1;\n\n        return rgb ? prop + 'rgba(' + [].concat(_toConsumableArray(rgb), [alpha]).join(',') + ');' : !color.background && alpha < 1 ? 'color:rgba(0,0,0,0.5);' : ''; // Chrome does not support 'opacity' property...\n    }\n}\n\n/*  ------------------------------------------------------------------------ */\n\nclass Code {\n\n    constructor(n) {\n        if (n !== undefined) {\n            this.value = Number(n);\n        }\n    }\n\n    get type() {\n        return types[Math.floor(this.value / 10)];\n    }\n\n    get subtype() {\n        return subtypes[this.type][this.value % 10];\n    }\n\n    get str() {\n        return this.value ? '\\u001b\\[' + this.value + 'm' : '';\n    }\n\n    static str(x) {\n        return new Code(x).str;\n    }\n\n    get isBrightness() {\n        return this.value === Code.noBrightness || this.value === Code.bright || this.value === Code.dim;\n    }\n}\n\n/*  ------------------------------------------------------------------------ */\n\nO.assign(Code, {\n\n    bright: 1,\n    dim: 2,\n    inverse: 7,\n    noBrightness: 22,\n    noItalic: 23,\n    noUnderline: 24,\n    noInverse: 27,\n    noColor: 39,\n    noBgColor: 49\n});\n\n/*  ------------------------------------------------------------------------ */\n\nconst replaceAll = (str, a, b) => str.split(a).join(b);\n\n/*  ANSI brightness codes do not overlap, e.g. \"{bright}{dim}foo\" will be rendered bright (not dim).\n    So we fix it by adding brightness canceling before each brightness code, so the former example gets\n    converted to \"{noBrightness}{bright}{noBrightness}{dim}foo\" â€“ this way it gets rendered as expected.\n */\n\nconst denormalizeBrightness = s => s.replace(/(\\u001b\\[(1|2)m)/g, '\\u001b[22m$1');\nconst normalizeBrightness = s => s.replace(/\\u001b\\[22m(\\u001b\\[(1|2)m)/g, '$1');\n\nconst wrap = (x, openCode, closeCode) => {\n\n    const open = Code.str(openCode),\n          close = Code.str(closeCode);\n\n    return String(x).split('\\n').map(line => denormalizeBrightness(open + replaceAll(normalizeBrightness(line), close, open) + close)).join('\\n');\n};\n\n/*  ------------------------------------------------------------------------ */\n\nconst camel = (a, b) => a + b.charAt(0).toUpperCase() + b.slice(1);\n\nconst stringWrappingMethods = (() => [].concat(_toConsumableArray(colorCodes.map((k, i) => !k ? [] : [// color methods\n\n[k, 30 + i, Code.noColor], [camel('bg', k), 40 + i, Code.noBgColor]])), _toConsumableArray(colorCodesLight.map((k, i) => !k ? [] : [// light color methods\n\n[k, 90 + i, Code.noColor], [camel('bg', k), 100 + i, Code.noBgColor]])), _toConsumableArray(['', 'BrightRed', 'BrightGreen', 'BrightYellow', 'BrightBlue', 'BrightMagenta', 'BrightCyan'].map((k, i) => !k ? [] : [['bg' + k, 100 + i, Code.noBgColor]])), _toConsumableArray(styleCodes.map((k, i) => !k ? [] : [// style methods\n\n[k, i, k === 'bright' || k === 'dim' ? Code.noBrightness : 20 + i]]))).reduce((a, b) => a.concat(b)))();\n\n/*  ------------------------------------------------------------------------ */\n\nconst assignStringWrappingAPI = function (target) {\n    let wrapBefore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : target;\n    return stringWrappingMethods.reduce((memo, _ref) => {\n        var _ref2 = _slicedToArray(_ref, 3);\n\n        let k = _ref2[0],\n            open = _ref2[1],\n            close = _ref2[2];\n        return O.defineProperty(memo, k, {\n            get: () => assignStringWrappingAPI(str => wrapBefore(wrap(str, open, close)))\n        });\n    }, target);\n};\n\n/*  ------------------------------------------------------------------------ */\n\n/**\n * Represents an ANSI-escaped string.\n */\nclass Colors {\n\n    /**\n     * @param {string} s a string containing ANSI escape codes.\n     */\n    constructor(s) {\n\n        if (s) {\n\n            const r = /\\u001b\\[(\\d+)m/g;\n\n            const spans = s.split(/\\u001b\\[\\d+m/);\n            const codes = [];\n\n            for (let match; match = r.exec(s);) codes.push(match[1]);\n\n            this.spans = spans.map((s, i) => ({ text: s, code: new Code(codes[i]) }));\n        } else {\n            this.spans = [];\n        }\n    }\n\n    get str() {\n        return this.spans.reduce((str, p) => str + p.text + p.code.str, '');\n    }\n\n    get parsed() {\n\n        var color = new Color(),\n            bgColor = new Color(true /* background */),\n            brightness = undefined,\n            styles = new Set();\n\n        return O.assign(new Colors(), {\n\n            spans: this.spans.map(span => {\n\n                const c = span.code;\n\n                const inverted = styles.has('inverse'),\n                      underline = styles.has('underline') ? 'text-decoration: underline;' : '',\n                      italic = styles.has('italic') ? 'font-style: italic;' : '',\n                      bold = brightness === Code.bright ? 'font-weight: bold;' : '';\n\n                const foreColor = color.defaultBrightness(brightness);\n\n                const styledSpan = O.assign({ css: bold + italic + underline + foreColor.css(inverted) + bgColor.css(inverted) }, clean({ bold: !!bold, color: foreColor.clean, bgColor: bgColor.clean }), span);\n\n                for (const k of styles) {\n                    styledSpan[k] = true;\n                }\n\n                if (c.isBrightness) {\n\n                    brightness = c.value;\n                } else {\n\n                    switch (span.code.type) {\n\n                        case 'color':\n                        case 'colorLight':\n                            color = new Color(false, c.subtype);break;\n\n                        case 'bgColor':\n                        case 'bgColorLight':\n                            bgColor = new Color(true, c.subtype);break;\n\n                        case 'style':\n                            styles.add(c.subtype);break;\n                        case 'unstyle':\n                            styles.delete(c.subtype);break;\n                    }\n                }\n\n                return styledSpan;\n            }).filter(s => s.text.length > 0)\n        });\n    }\n\n    /*  Outputs with Chrome DevTools-compatible format     */\n\n    get asChromeConsoleLogArguments() {\n\n        const spans = this.parsed.spans;\n\n        return [spans.map(s => '%c' + s.text).join('')].concat(_toConsumableArray(spans.map(s => s.css)));\n    }\n\n    get browserConsoleArguments() /* LEGACY, DEPRECATED */{\n        return this.asChromeConsoleLogArguments;\n    }\n\n    /**\n     * @desc installs String prototype extensions\n     * @example\n     * require ('ansicolor').nice\n     * console.log ('foo'.bright.red)\n     */\n    static get nice() {\n\n        Colors.names.forEach(k => {\n            if (!(k in String.prototype)) {\n                O.defineProperty(String.prototype, k, { get: function () {\n                        return Colors[k](this);\n                    } });\n            }\n        });\n\n        return Colors;\n    }\n\n    /**\n     * @desc parses a string containing ANSI escape codes\n     * @return {Colors} parsed representation.\n     */\n    static parse(s) {\n        return new Colors(s).parsed;\n    }\n\n    /**\n     * @desc strips ANSI codes from a string\n     * @param {string} s a string containing ANSI escape codes.\n     * @return {string} clean string.\n     */\n    static strip(s) {\n        return s.replace(/[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g, ''); // hope V8 caches the regexp\n    }\n\n    /**\n     * @example\n     * const spans = [...ansi.parse ('\\u001b[7m\\u001b[7mfoo\\u001b[7mbar\\u001b[27m')]\n     */\n    [Symbol.iterator]() {\n        return this.spans[Symbol.iterator]();\n    }\n}\n\n/*  ------------------------------------------------------------------------ */\n\nassignStringWrappingAPI(Colors, str => str);\n\n/*  ------------------------------------------------------------------------ */\n\nColors.names = stringWrappingMethods.map((_ref3) => {\n    var _ref4 = _slicedToArray(_ref3, 1);\n\n    let k = _ref4[0];\n    return k;\n});\n\n/*  ------------------------------------------------------------------------ */\n\nColors.rgb = {\n\n    black: [0, 0, 0],\n    darkGray: [100, 100, 100],\n    lightGray: [200, 200, 200],\n    white: [255, 255, 255],\n\n    red: [204, 0, 0],\n    lightRed: [255, 51, 0],\n\n    green: [0, 204, 0],\n    lightGreen: [51, 204, 51],\n\n    yellow: [204, 102, 0],\n    lightYellow: [255, 153, 51],\n\n    blue: [0, 0, 255],\n    lightBlue: [26, 140, 255],\n\n    magenta: [204, 0, 204],\n    lightMagenta: [255, 0, 255],\n\n    cyan: [0, 153, 255],\n    lightCyan: [0, 204, 255]\n\n    /*  ------------------------------------------------------------------------ */\n\n};module.exports = Colors;\n\n/*  ------------------------------------------------------------------------ */\n\n"},"sourceMaps":{"js":{"version":3,"sources":["../ansicolor.js"],"names":[],"mappings":"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","file":"ansicolor.js","sourcesContent":["\"use strict\";\n\n/*  ------------------------------------------------------------------------ */\n\nconst O = Object\n\n/*  See https://misc.flogisoft.com/bash/tip_colors_and_formatting\n    ------------------------------------------------------------------------ */\n\nconst colorCodes      = [   'black',      'red',      'green',      'yellow',      'blue',      'magenta',      'cyan', 'lightGray', '', 'default']\n    , colorCodesLight = ['darkGray', 'lightRed', 'lightGreen', 'lightYellow', 'lightBlue', 'lightMagenta', 'lightCyan', 'white', '']\n    \n    , styleCodes = ['', 'bright', 'dim', 'italic', 'underline', '', '', 'inverse']\n\n    , asBright = { 'red':       'lightRed',\n                   'green':     'lightGreen',\n                   'yellow':    'lightYellow',\n                   'blue':      'lightBlue',\n                   'magenta':   'lightMagenta',\n                   'cyan':      'lightCyan',\n                   'black':     'darkGray',\n                   'lightGray': 'white' }\n    \n    , types = { 0:  'style',\n                2:  'unstyle',\n                3:  'color',\n                9:  'colorLight',\n                4:  'bgColor',\n                10: 'bgColorLight' }\n\n    , subtypes = {  color:         colorCodes,\n                    colorLight:    colorCodesLight,\n                    bgColor:       colorCodes,\n                    bgColorLight:  colorCodesLight,\n                    style:         styleCodes,\n                    unstyle:       styleCodes    }\n\n/*  ------------------------------------------------------------------------ */\n\nconst clean = obj => {\n                for (const k in obj) { if (!obj[k]) { delete obj[k] } }\n                return (O.keys (obj).length === 0) ? undefined : obj\n            }\n\n/*  ------------------------------------------------------------------------ */\n\nclass Color {\n\n    constructor (background, name, brightness) {\n\n        this.background = background\n        this.name       = name\n        this.brightness = brightness\n    }\n\n    get inverse () {\n        return new Color (!this.background, this.name || (this.background ? 'black' : 'white'), this.brightness)\n    }\n\n    get clean () {\n        return clean ({ name:   this.name === 'default' ? '' : this.name,\n                        bright: this.brightness === Code.bright,\n                        dim:    this.brightness === Code.dim })\n    }\n\n    defaultBrightness (value) {\n\n        return new Color (this.background, this.name, this.brightness || value)\n    }\n\n    css (inverted) {\n\n        const color = inverted ? this.inverse : this\n\n        const rgbName = ((color.brightness === Code.bright) && asBright[color.name]) || color.name\n\n        const prop = (color.background ? 'background:' : 'color:')\n            , rgb  = Colors.rgb[rgbName]\n            , alpha = (this.brightness === Code.dim) ? 0.5 : 1\n\n        return rgb\n                ? (prop + 'rgba(' + [...rgb, alpha].join (',') + ');')\n                : ((!color.background && (alpha < 1)) ? 'color:rgba(0,0,0,0.5);' : '') // Chrome does not support 'opacity' property...\n    }\n}\n\n/*  ------------------------------------------------------------------------ */\n\nclass Code {\n\n    constructor (n) {\n        if (n !== undefined) { this.value = Number (n) } }\n\n    get type () {\n       return types[Math.floor (this.value / 10)] }\n\n    get subtype () {\n        return subtypes[this.type][this.value % 10] }\n\n    get str () {\n        return (this.value ? ('\\u001b\\[' + this.value + 'm') : '') }\n\n    static str (x) {\n        return new Code (x).str }\n\n    get isBrightness () {\n        return (this.value === Code.noBrightness) || (this.value === Code.bright) || (this.value === Code.dim) }\n}\n\n/*  ------------------------------------------------------------------------ */\n\nO.assign (Code, {\n\n    bright:       1,\n    dim:          2,\n    inverse:      7,\n    noBrightness: 22,\n    noItalic:     23,\n    noUnderline:  24,\n    noInverse:    27,\n    noColor:      39,\n    noBgColor:    49\n})\n\n/*  ------------------------------------------------------------------------ */\n\nconst replaceAll = (str, a, b) => str.split (a).join (b)\n\n/*  ANSI brightness codes do not overlap, e.g. \"{bright}{dim}foo\" will be rendered bright (not dim).\n    So we fix it by adding brightness canceling before each brightness code, so the former example gets\n    converted to \"{noBrightness}{bright}{noBrightness}{dim}foo\" â€“ this way it gets rendered as expected.\n */\n\nconst denormalizeBrightness = s => s.replace (/(\\u001b\\[(1|2)m)/g, '\\u001b[22m$1')\nconst normalizeBrightness = s => s.replace (/\\u001b\\[22m(\\u001b\\[(1|2)m)/g, '$1')\n\nconst wrap = (x, openCode, closeCode) => {\n\n    const open  = Code.str (openCode),\n          close = Code.str (closeCode)\n\n    return String (x)\n                .split ('\\n')\n                .map (line => denormalizeBrightness (open + replaceAll (normalizeBrightness (line), close, open) + close))\n                .join ('\\n')\n}\n\n/*  ------------------------------------------------------------------------ */\n\nconst camel = (a, b) => a + b.charAt (0).toUpperCase () + b.slice (1)\n\n\nconst stringWrappingMethods = (() => [\n\n        ...colorCodes.map ((k, i) => !k ? [] : [ // color methods\n\n            [k,               30 + i, Code.noColor],\n            [camel ('bg', k), 40 + i, Code.noBgColor],\n        ]),\n\n        ...colorCodesLight.map ((k, i) => !k ? [] : [ // light color methods\n            \n            [k,                90 + i, Code.noColor],\n            [camel ('bg', k), 100 + i, Code.noBgColor],\n        ]),\n\n        /* THIS ONE IS FOR BACKWARDS COMPATIBILITY WITH PREVIOUS VERSIONS (had 'bright' instead of 'light' for backgrounds)\n         */\n        ...['', 'BrightRed', 'BrightGreen', 'BrightYellow', 'BrightBlue', 'BrightMagenta', 'BrightCyan'].map ((k, i) => !k ? [] : [\n            \n            ['bg' + k, 100 + i, Code.noBgColor],\n        ]),\n        \n        ...styleCodes.map ((k, i) => !k ? [] : [ // style methods\n\n            [k, i, ((k === 'bright') || (k === 'dim')) ? Code.noBrightness : (20 + i)]\n        ])\n    ]\n    .reduce ((a, b) => a.concat (b))\n    \n) ();\n\n/*  ------------------------------------------------------------------------ */\n\nconst assignStringWrappingAPI = (target, wrapBefore = target) =>\n\n    stringWrappingMethods.reduce ((memo, [k, open, close]) =>\n                                        O.defineProperty (memo, k, {\n                                            get: () => assignStringWrappingAPI (str => wrapBefore (wrap (str, open, close)))\n                                        }),\n\n                                  target)\n\n/*  ------------------------------------------------------------------------ */\n\n/**\n * Represents an ANSI-escaped string.\n */\nclass Colors {\n\n    /**\n     * @param {string} s a string containing ANSI escape codes.\n     */\n    constructor (s) {\n\n        if (s) {\n\n            const r = /\\u001b\\[(\\d+)m/g\n\n            const spans = s.split (/\\u001b\\[\\d+m/)\n            const codes = []\n\n            for (let match; match = r.exec (s);) codes.push (match[1])\n\n            this.spans = spans.map ((s, i) => ({ text: s, code: new Code (codes[i]) })) \n        }\n\n        else {\n            this.spans = []\n        }\n    }\n\n    get str () {\n        return this.spans.reduce ((str, p) => str + p.text + p.code.str, '')\n    }\n\n    get parsed () {\n\n        var color      = new Color (),\n            bgColor    = new Color (true /* background */),\n            brightness = undefined,\n            styles     = new Set ()\n\n        return O.assign (new Colors (), {\n\n            spans: this.spans.map (span => {\n\n                const c = span.code\n\n                const inverted  = styles.has ('inverse'),\n                      underline = styles.has ('underline')   ? 'text-decoration: underline;' : '',                      \n                      italic    = styles.has ('italic')      ? 'font-style: italic;' : '',\n                      bold      = brightness === Code.bright ? 'font-weight: bold;' : ''\n\n                const foreColor = color.defaultBrightness (brightness)\n\n                const styledSpan = O.assign (\n                                        { css: bold + italic + underline + foreColor.css (inverted) + bgColor.css (inverted) },\n                                        clean ({ bold: !!bold, color: foreColor.clean, bgColor: bgColor.clean }),\n                                        span)\n\n                for (const k of styles) { styledSpan[k] = true }\n\n                if (c.isBrightness) {\n\n                    brightness = c.value\n                \n                } else {\n\n                    switch (span.code.type) {\n\n                        case 'color'        :\n                        case 'colorLight'   : color   = new Color (false, c.subtype); break\n\n                        case 'bgColor'      :\n                        case 'bgColorLight' : bgColor = new Color (true,  c.subtype); break\n\n                        case 'style'  : styles.add    (c.subtype); break\n                        case 'unstyle': styles.delete (c.subtype); break\n                    }\n                }\n\n                return styledSpan\n\n            }).filter (s => s.text.length > 0)\n        })\n    }\n\n/*  Outputs with Chrome DevTools-compatible format     */\n\n    get asChromeConsoleLogArguments () {\n\n        const spans = this.parsed.spans\n\n        return [spans.map (s => ('%c' + s.text)).join (''),\n             ...spans.map (s => s.css)]\n    }\n\n    get browserConsoleArguments () /* LEGACY, DEPRECATED */ { return this.asChromeConsoleLogArguments }\n\n    /**\n     * @desc installs String prototype extensions\n     * @example\n     * require ('ansicolor').nice\n     * console.log ('foo'.bright.red)\n     */\n    static get nice () {\n\n        Colors.names.forEach (k => {\n            if (!(k in String.prototype)) {\n                O.defineProperty (String.prototype, k, { get: function () { return Colors[k] (this) } })\n            }\n        })\n\n        return Colors\n    }\n\n    /**\n     * @desc parses a string containing ANSI escape codes\n     * @return {Colors} parsed representation.\n     */\n    static parse (s) {\n        return new Colors (s).parsed\n    }\n\n    /**\n     * @desc strips ANSI codes from a string\n     * @param {string} s a string containing ANSI escape codes.\n     * @return {string} clean string.\n     */\n    static strip (s) {\n        return s.replace (/[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g, '') // hope V8 caches the regexp\n    }\n\n    /**\n     * @example\n     * const spans = [...ansi.parse ('\\u001b[7m\\u001b[7mfoo\\u001b[7mbar\\u001b[27m')]\n     */\n    [Symbol.iterator] () {\n        return this.spans[Symbol.iterator] ()\n    }\n}\n\n/*  ------------------------------------------------------------------------ */\n\nassignStringWrappingAPI (Colors, str => str)\n\n/*  ------------------------------------------------------------------------ */\n\nColors.names = stringWrappingMethods.map (([k]) => k)\n\n/*  ------------------------------------------------------------------------ */\n\nColors.rgb = {\n\n    black:        [0,     0,   0],    \n    darkGray:     [100, 100, 100],\n    lightGray:    [200, 200, 200],\n    white:        [255, 255, 255],\n\n    red:          [204,   0,   0],\n    lightRed:     [255,  51,   0],\n    \n    green:        [0,   204,   0],\n    lightGreen:   [51,  204,  51],\n    \n    yellow:       [204, 102,   0],\n    lightYellow:  [255, 153,  51],\n    \n    blue:         [0,     0, 255],\n    lightBlue:    [26,  140, 255],\n    \n    magenta:      [204,   0, 204],\n    lightMagenta: [255,   0, 255],\n    \n    cyan:         [0,   153, 255],\n    lightCyan:    [0,   204, 255],\n}\n\n/*  ------------------------------------------------------------------------ */\n\nmodule.exports = Colors\n\n/*  ------------------------------------------------------------------------ */\n\n"]}},"error":null,"hash":"201acb4772856c1e7fbed54339ac99bf","cacheData":{"env":{}}}