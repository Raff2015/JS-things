{"id":"node_modules/as-table/build/as-table.js","dependencies":[{"name":"C:\\Users\\Raff_8\\Desktop\\Complete Intro to Web Development -v2 Brian Holt\\Animation\\package.json","includedInParent":true,"mtime":1588558791670},{"name":"C:\\Users\\Raff_8\\Desktop\\Complete Intro to Web Development -v2 Brian Holt\\Animation\\node_modules\\as-table\\package.json","includedInParent":true,"mtime":1588558763449},{"name":"C:\\Users\\Raff_8\\Desktop\\Complete Intro to Web Development -v2 Brian Holt\\Animation\\node_modules\\as-table\\.babelrc","includedInParent":true,"mtime":1507582335000},{"name":"printable-characters","loc":{"line":7,"column":23},"parent":"C:\\Users\\Raff_8\\Desktop\\Complete Intro to Web Development -v2 Brian Holt\\Animation\\node_modules\\as-table\\build\\as-table.js","resolved":"C:\\Users\\Raff_8\\Desktop\\Complete Intro to Web Development -v2 Brian Holt\\Animation\\node_modules\\printable-characters\\build\\printable-characters.js"}],"generated":{"js":"\"use strict\";\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\nconst O = Object;\n\nvar _require = require('printable-characters');\n\nconst first = _require.first,\n      strlen = _require.strlen,\n      limit = (s, n) => first(s, n - 1) + '…';\n\nconst asColumns = (rows, cfg_) => {\n\n    const zip = (arrs, f) => arrs.reduce((a, b) => b.map((b, i) => [].concat(_toConsumableArray(a[i] || []), [b])), []).map(args => f.apply(undefined, _toConsumableArray(args))),\n\n\n    /*  Convert cell data to string (converting multiline text to singleline) */\n\n    cells = rows.map(r => r.map(c => c === undefined ? '' : cfg_.print(c).replace(/\\n/g, '\\\\n'))),\n\n\n    /*  Compute column widths (per row) and max widths (per column)     */\n\n    cellWidths = cells.map(r => r.map(strlen)),\n          maxWidths = zip(cellWidths, Math.max),\n\n\n    /*  Default config     */\n\n    cfg = O.assign({\n        delimiter: '  ',\n        minColumnWidths: maxWidths.map(x => 0),\n        maxTotalWidth: 0 }, cfg_),\n          delimiterLength = strlen(cfg.delimiter),\n\n\n    /*  Project desired column widths, taking maxTotalWidth and minColumnWidths in account.     */\n\n    totalWidth = maxWidths.reduce((a, b) => a + b, 0),\n          relativeWidths = maxWidths.map(w => w / totalWidth),\n          maxTotalWidth = cfg.maxTotalWidth - delimiterLength * (maxWidths.length - 1),\n          excessWidth = Math.max(0, totalWidth - maxTotalWidth),\n          computedWidths = zip([cfg.minColumnWidths, maxWidths, relativeWidths], (min, max, relative) => Math.max(min, Math.floor(max - excessWidth * relative))),\n\n\n    /*  This is how many symbols we should pad or cut (per column).  */\n\n    restCellWidths = cellWidths.map(widths => zip([computedWidths, widths], (a, b) => a - b));\n\n    /*  Perform final composition.   */\n\n    return zip([cells, restCellWidths], (a, b) => zip([a, b], (str, w) => w >= 0 ? cfg.right ? ' '.repeat(w) + str : str + ' '.repeat(w) : limit(str, strlen(str) + w)).join(cfg.delimiter));\n};\n\nconst asTable = cfg => O.assign(arr => {\n    var _ref;\n\n    /*  Print arrays  */\n\n    if (arr[0] && Array.isArray(arr[0])) return asColumns(arr, cfg).join('\\n');\n\n    /*  Print objects   */\n\n    const colNames = [].concat(_toConsumableArray(new Set((_ref = []).concat.apply(_ref, _toConsumableArray(arr.map(O.keys)))))),\n          columns = [colNames.map(cfg.title)].concat(_toConsumableArray(arr.map(o => colNames.map(key => o[key])))),\n          lines = asColumns(columns, cfg);\n\n    return [lines[0], cfg.dash.repeat(strlen(lines[0]))].concat(_toConsumableArray(lines.slice(1))).join('\\n');\n}, cfg, {\n\n    configure: newConfig => asTable(O.assign({}, cfg, newConfig))\n});\n\nmodule.exports = asTable({\n\n    maxTotalWidth: Number.MAX_SAFE_INTEGER,\n    print: String,\n    title: String,\n    dash: '-',\n    right: false\n});\n\n"},"sourceMaps":{"js":{"version":3,"sources":["../as-table.js"],"names":[],"mappings":"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","file":"as-table.js","sourcesContent":["\"use strict\";\n\nconst O = Object\n    , { first, strlen } = require ('printable-characters') // handles ANSI codes and invisible characters\n    , limit = (s, n) => (first (s, n - 1) + '…')\n\nconst asColumns = (rows, cfg_) => {\n    \n    const\n\n        zip = (arrs, f) => arrs.reduce ((a, b) => b.map ((b, i) => [...a[i] || [], b]), []).map (args => f (...args)),\n\n    /*  Convert cell data to string (converting multiline text to singleline) */\n\n        cells           = rows.map (r => r.map (c => (c === undefined) ? '' : cfg_.print (c).replace (/\\n/g, '\\\\n'))),\n\n    /*  Compute column widths (per row) and max widths (per column)     */\n\n        cellWidths      = cells.map (r => r.map (strlen)),\n        maxWidths       = zip (cellWidths, Math.max),\n\n    /*  Default config     */\n\n        cfg             = O.assign ({\n                            delimiter: '  ',\n                            minColumnWidths: maxWidths.map (x => 0),\n                            maxTotalWidth: 0 }, cfg_),\n\n        delimiterLength = strlen (cfg.delimiter),\n\n    /*  Project desired column widths, taking maxTotalWidth and minColumnWidths in account.     */\n\n        totalWidth      = maxWidths.reduce ((a, b) => a + b, 0),\n        relativeWidths  = maxWidths.map (w => w / totalWidth),\n        maxTotalWidth   = cfg.maxTotalWidth - (delimiterLength * (maxWidths.length - 1)),\n        excessWidth     = Math.max (0, totalWidth - maxTotalWidth),\n        computedWidths  = zip ([cfg.minColumnWidths, maxWidths, relativeWidths],\n                            (min, max, relative) => Math.max (min, Math.floor (max - excessWidth * relative))),\n\n    /*  This is how many symbols we should pad or cut (per column).  */\n\n        restCellWidths  = cellWidths.map (widths => zip ([computedWidths, widths], (a, b) => a - b))\n\n    /*  Perform final composition.   */\n\n        return zip ([cells, restCellWidths], (a, b) =>\n                zip ([a, b], (str, w) => (w >= 0)\n                                            ? (cfg.right ? (' '.repeat (w) + str) : (str + ' '.repeat (w)))\n                                            : (limit (str, strlen (str) + w))).join (cfg.delimiter))\n}\n\nconst asTable = cfg => O.assign (arr => {\n\n/*  Print arrays  */\n\n    if (arr[0] && Array.isArray (arr[0]))\n        return asColumns (arr, cfg).join ('\\n')\n\n/*  Print objects   */\n\n    const colNames        = [...new Set ([].concat (...arr.map (O.keys)))],\n          columns         = [colNames.map (cfg.title), ...arr.map (o => colNames.map (key => o[key]))],\n          lines           = asColumns (columns, cfg)\n\n    return [lines[0], cfg.dash.repeat (strlen (lines[0])), ...lines.slice (1)].join ('\\n')\n\n}, cfg, {\n\n    configure: newConfig => asTable (O.assign ({}, cfg, newConfig)),\n})\n\nmodule.exports = asTable ({\n\n    maxTotalWidth: Number.MAX_SAFE_INTEGER,\n    print: String,\n    title: String,\n    dash: '-',\n    right: false\n})"]}},"error":null,"hash":"f29bcbac2c8ad5f61045097f16f8f4d5","cacheData":{"env":{}}}