{"id":"node_modules/printable-characters/build/printable-characters.js","dependencies":[{"name":"C:\\Users\\Raff_8\\Desktop\\Complete Intro to Web Development -v2 Brian Holt\\Animation\\package.json","includedInParent":true,"mtime":1588558791670},{"name":"C:\\Users\\Raff_8\\Desktop\\Complete Intro to Web Development -v2 Brian Holt\\Animation\\node_modules\\printable-characters\\package.json","includedInParent":true,"mtime":1588558763525},{"name":"C:\\Users\\Raff_8\\Desktop\\Complete Intro to Web Development -v2 Brian Holt\\Animation\\node_modules\\printable-characters\\.babelrc","includedInParent":true,"mtime":1507399327000}],"generated":{"js":"\"use strict\";\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nconst ansiEscapeCode = '[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]',\n      zeroWidthCharacterExceptNewline = '\\u0000-\\u0008\\u000B-\\u0019\\u001b\\u009b\\u00ad\\u200b\\u2028\\u2029\\ufeff\\ufe00-\\ufe0f',\n      zeroWidthCharacter = '\\n' + zeroWidthCharacterExceptNewline,\n      zeroWidthCharactersExceptNewline = new RegExp('(?:' + ansiEscapeCode + ')|[' + zeroWidthCharacterExceptNewline + ']', 'g'),\n      zeroWidthCharacters = new RegExp('(?:' + ansiEscapeCode + ')|[' + zeroWidthCharacter + ']', 'g'),\n      partition = new RegExp('((?:' + ansiEscapeCode + ')|[\\t' + zeroWidthCharacter + '])?([^\\t' + zeroWidthCharacter + ']*)', 'g');\n\nmodule.exports = {\n\n    zeroWidthCharacters,\n\n    ansiEscapeCodes: new RegExp(ansiEscapeCode, 'g'),\n\n    strlen: s => Array.from(s.replace(zeroWidthCharacters, '')).length, // Array.from solves the emoji problem as described here: http://blog.jonnew.com/posts/poo-dot-length-equals-two\n\n    isBlank: s => s.replace(zeroWidthCharacters, '').replace(/\\s/g, '').length === 0,\n\n    blank: s => Array.from(s.replace(zeroWidthCharactersExceptNewline, '')) // Array.from solves the emoji problem as described here: http://blog.jonnew.com/posts/poo-dot-length-equals-two\n    .map(x => x === '\\t' || x === '\\n' ? x : ' ').join(''),\n\n    partition(s) {\n        for (var m, spans = []; partition.lastIndex !== s.length && (m = partition.exec(s));) {\n            spans.push([m[1] || '', m[2]]);\n        }\n        partition.lastIndex = 0; // reset\n        return spans;\n    },\n\n    first(s, n) {\n\n        let result = '',\n            length = 0;\n\n        for (const _ref of module.exports.partition(s)) {\n            var _ref2 = _slicedToArray(_ref, 2);\n\n            const nonPrintable = _ref2[0];\n            const printable = _ref2[1];\n\n            const text = Array.from(printable).slice(0, n - length); // Array.from solves the emoji problem as described here: http://blog.jonnew.com/posts/poo-dot-length-equals-two\n            result += nonPrintable + text.join('');\n            length += text.length;\n        }\n\n        return result;\n    }\n};\n\n"},"sourceMaps":{"js":{"version":3,"sources":["../printable-characters.js"],"names":[],"mappings":"AAAA;;;;AAEA,MAAM,iBAAmC,4EAAzC;AAAA,MACM,kCAAmC,mFADzC;AAAA,MAEM,qBAAmC,OAAO,+BAFhD;AAAA,MAGM,mCAAmC,IAAI,MAAJ,CAAY,QAAQ,cAAR,GAAyB,KAAzB,GAAiC,+BAAjC,GAAmE,GAA/E,EAAoF,GAApF,CAHzC;AAAA,MAIM,sBAAmC,IAAI,MAAJ,CAAY,QAAQ,cAAR,GAAyB,KAAzB,GAAiC,kBAAjC,GAAsD,GAAlE,EAAuE,GAAvE,CAJzC;AAAA,MAKM,YAAmC,IAAI,MAAJ,CAAY,SAAS,cAAT,GAA0B,OAA1B,GAAoC,kBAApC,GAAyD,UAAzD,GAAsE,kBAAtE,GAA2F,KAAvG,EAA8G,GAA9G,CALzC;;AAOA,OAAO,OAAP,GAAiB;;AAEb,uBAFa;;AAIb,qBAAiB,IAAI,MAAJ,CAAY,cAAZ,EAA4B,GAA5B,CAJJ;;AAMb,YAAQ,KAAK,MAAM,IAAN,CAAY,EAAE,OAAF,CAAW,mBAAX,EAAgC,EAAhC,CAAZ,EAAiD,MANjD,EAMyD;;AAEtE,aAAS,KAAK,EAAE,OAAF,CAAW,mBAAX,EAAgC,EAAhC,EACE,OADF,CACW,KADX,EACkB,EADlB,EAEE,MAFF,KAEa,CAVd;;AAYb,WAAO,KAAK,MAAM,IAAN,CAAY,EAAE,OAAF,CAAW,gCAAX,EAA6C,EAA7C,CAAZ,EAA8D;AAA9D,KACM,GADN,CACW,KAAO,MAAM,IAAP,IAAiB,MAAM,IAAxB,GAAiC,CAAjC,GAAqC,GADrD,EAEM,IAFN,CAEY,EAFZ,CAZC;;AAgBb,cAAW,CAAX,EAAc;AACV,aAAK,IAAI,CAAJ,EAAO,QAAQ,EAApB,EAAyB,UAAU,SAAV,KAAwB,EAAE,MAA3B,KAAuC,IAAI,UAAU,IAAV,CAAgB,CAAhB,CAA3C,CAAxB,GAAyF;AAAE,kBAAM,IAAN,CAAY,CAAC,EAAE,CAAF,KAAQ,EAAT,EAAa,EAAE,CAAF,CAAb,CAAZ;AAAiC;AAC5H,kBAAU,SAAV,GAAsB,CAAtB,CAFU,CAEc;AACxB,eAAO,KAAP;AACH,KApBY;;AAsBb,UAAO,CAAP,EAAU,CAAV,EAAa;;AAET,YAAI,SAAS,EAAb;AAAA,YAAiB,SAAS,CAA1B;;AAEA,2BAAwC,OAAO,OAAP,CAAe,SAAf,CAA0B,CAA1B,CAAxC,EAAsE;AAAA;;AAAA,kBAA1D,YAA0D;AAAA,kBAA5C,SAA4C;;AAClE,kBAAM,OAAO,MAAM,IAAN,CAAY,SAAZ,EAAuB,KAAvB,CAA8B,CAA9B,EAAiC,IAAI,MAArC,CAAb,CADkE,CACR;AAC1D,sBAAU,eAAe,KAAK,IAAL,CAAW,EAAX,CAAzB;AACA,sBAAU,KAAK,MAAf;AACH;;AAED,eAAO,MAAP;AACH;AAjCY,CAAjB","file":"printable-characters.js","sourcesContent":["\"use strict\";\n\nconst ansiEscapeCode                   = '[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]'\n    , zeroWidthCharacterExceptNewline  = '\\u0000-\\u0008\\u000B-\\u0019\\u001b\\u009b\\u00ad\\u200b\\u2028\\u2029\\ufeff\\ufe00-\\ufe0f'\n    , zeroWidthCharacter               = '\\n' + zeroWidthCharacterExceptNewline\n    , zeroWidthCharactersExceptNewline = new RegExp ('(?:' + ansiEscapeCode + ')|[' + zeroWidthCharacterExceptNewline + ']', 'g')\n    , zeroWidthCharacters              = new RegExp ('(?:' + ansiEscapeCode + ')|[' + zeroWidthCharacter + ']', 'g')\n    , partition                        = new RegExp ('((?:' + ansiEscapeCode + ')|[\\t' + zeroWidthCharacter + '])?([^\\t' + zeroWidthCharacter + ']*)', 'g')\n\nmodule.exports = {\n\n    zeroWidthCharacters,\n\n    ansiEscapeCodes: new RegExp (ansiEscapeCode, 'g'),\n\n    strlen: s => Array.from (s.replace (zeroWidthCharacters, '')).length, // Array.from solves the emoji problem as described here: http://blog.jonnew.com/posts/poo-dot-length-equals-two\n\n    isBlank: s => s.replace (zeroWidthCharacters, '')\n                   .replace (/\\s/g, '')\n                   .length === 0,\n\n    blank: s => Array.from (s.replace (zeroWidthCharactersExceptNewline, '')) // Array.from solves the emoji problem as described here: http://blog.jonnew.com/posts/poo-dot-length-equals-two\n                     .map (x => ((x === '\\t') || (x === '\\n')) ? x : ' ')\n                     .join (''),\n\n    partition (s) {\n        for (var m, spans = []; (partition.lastIndex !== s.length) && (m = partition.exec (s));) { spans.push ([m[1] || '', m[2]]) }\n        partition.lastIndex = 0 // reset\n        return spans\n    },\n\n    first (s, n) {\n\n        let result = '', length = 0\n\n        for (const [nonPrintable, printable] of module.exports.partition (s)) {\n            const text = Array.from (printable).slice (0, n - length) // Array.from solves the emoji problem as described here: http://blog.jonnew.com/posts/poo-dot-length-equals-two\n            result += nonPrintable + text.join ('')\n            length += text.length\n        }\n\n        return result\n    }\n}"]}},"error":null,"hash":"203d907433c26c6bca7d3cd90021ef1c","cacheData":{"env":{}}}