{"id":"node_modules/meta-fields/meta-fields.js","dependencies":[{"name":"C:\\Users\\Raff_8\\Desktop\\Complete Intro to Web Development -v2 Brian Holt\\Animation\\package.json","includedInParent":true,"mtime":1588558791670},{"name":"C:\\Users\\Raff_8\\Desktop\\Complete Intro to Web Development -v2 Brian Holt\\Animation\\node_modules\\meta-fields\\package.json","includedInParent":true,"mtime":1588558757571},{"name":"C:\\Users\\Raff_8\\Desktop\\Complete Intro to Web Development -v2 Brian Holt\\Animation\\node_modules\\meta-fields\\.babelrc","includedInParent":true,"mtime":1491393959000},{"name":"string.bullet","loc":{"line":61,"column":36},"parent":"C:\\Users\\Raff_8\\Desktop\\Complete Intro to Web Development -v2 Brian Holt\\Animation\\node_modules\\meta-fields\\meta-fields.js","resolved":"C:\\Users\\Raff_8\\Desktop\\Complete Intro to Web Development -v2 Brian Holt\\Animation\\node_modules\\string.bullet\\string.bullet.js"}],"generated":{"js":"var global = arguments[3];\n\"use strict\";\n\n/*  ------------------------------------------------------------------------ */\n\n    const O = Object\n\n/*  ------------------------------------------------------------------------ */\n\n    const pickFields = (obj, predicate) => {\n\n        const result = {}\n\n        for (let k of Object.getOwnPropertyNames (obj)) {\n            const v = obj[k]\n            if (predicate (k, v)) { result[k] = v }\n        }\n\n        return result\n    }\n\n/*  ------------------------------------------------------------------------ */\n\n    class Meta {\n\n        constructor (x) {\n\n            this.assign (x)\n        }\n\n        assign (x) {\n\n            if ('wrapped' in x) { this.wrapped = x.wrapped }\n\n            this.__meta__ = x.__meta__ || {}\n\n            return this\n        }\n\n        [Symbol.for ('String.ify')] (stringify) {\n\n            if (stringify.json) {\n\n                return stringify (this.wrapped)\n            }\n\n            let left = ''\n            let numMeta = 0\n\n            for (let tag in this.__meta__) {\n\n                const name = '$' + tag\n                const value = this.__meta__[tag]\n\n                left = (typeof value === 'boolean')\n                            ? (name + ' (' + left)\n                            : (name + ' (' + stringify.configure ({ pretty: false }) (value) + ', ' + left)\n\n                numMeta++\n            }\n\n            const bullet = require ('string.bullet')\n\n            return bullet (left, stringify (this.wrapped)) + ')'.repeat (numMeta)\n        }\n    }\n\n/*  ------------------------------------------------------------------------ */\n\n    module.exports = O.assign (Meta, {\n\n        new: x => new Meta (x),\n\n        coerce: function (x) { return Meta.is (x) ? x : Meta.new ((arguments.length > 0) ? { wrapped: x } : {}) },\n\n        assign: (x, fields) => (Meta.new (Meta.is (x) ? x : { wrapped: x })).assign (fields),\n\n        is: x => (x && (x['__meta__'] !== undefined)) || false,\n\n        hasValue: x => ('wrapped' in Meta.coerce (x)),\n\n        unwrap: x => Meta.coerce (x).wrapped,\n\n        hasTag: (obj, tag) => Meta.is (obj) && (tag in obj.__meta__),\n\n        readTag: (obj, tag) => Meta.is (obj) ? obj.__meta__[tag] : undefined,\n\n        tags: x => Meta.coerce (x).__meta__,\n\n        eachTag: (x, fn) => {\n            const tags = Meta.tags (x)\n            for (let i in tags) { fn (i, tags[i]) }\n        },\n\n        replaceTags: (x, tags) => Meta.assign (x, { __meta__: tags }),\n\n        setTags: (x, tags) => Meta.replaceTags (x, O.assign ({}, Meta.tags (x), tags)),\n\n        setTag: (name, data, ...toWhat) => Meta.setTags (Meta.coerce (...toWhat), { [name]: data }),\n\n        merge: (a, b) => (Meta.is (a) || Meta.is (b))\n                            ? Meta.replaceTags (b, O.assign ({}, Meta.tags (a), Meta.tags (b)))\n                            : b,\n\n        omitTags (x, ...names) {\n\n            if (!Meta.is (x)) { return x }\n\n            const $names = new Set (names)\n\n            return Meta.replaceTags (x, pickFields (x.__meta__, k => !$names.has (k)))\n        },\n\n        modify: (x, fn) => Meta.merge (x, fn (Meta.unwrap (x))),\n\n        tag: (k, impl) => {\n\n            const defaultImpl = (...args) => (args.length < 2)\n                                                ? Meta.setTag (k, true, ...args) // $tag (value)\n                                                : Meta.setTag (k,       ...args) // $tag (data, value)\n\n            return O.assign ((typeof impl === 'function') ? impl.bind (null, k) : defaultImpl, {\n\n               tagName: k,\n                  read: x =>  Meta.readTag (x, k),\n                    is: x =>  Meta.hasTag  (x, k),\n                 isNot: x => !Meta.hasTag  (x, k),\n            })\n        },\n\n        globalTag: (name, ...args) => {\n\n            const isBrowser = (typeof window !== 'undefined') && (window.window === window) && window.navigator,\n                  globalNamespace = isBrowser ? window : global\n\n            return globalNamespace['$' + name] || (globalNamespace['$' + name] = Meta.tag (name, ...args))\n        },\n    })\n\n/*  ------------------------------------------------------------------------ */\n\n\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/meta-fields/meta-fields.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}}],"sources":{"node_modules/meta-fields/meta-fields.js":"\"use strict\";\n\n/*  ------------------------------------------------------------------------ */\n\n    const O = Object\n\n/*  ------------------------------------------------------------------------ */\n\n    const pickFields = (obj, predicate) => {\n\n        const result = {}\n\n        for (let k of Object.getOwnPropertyNames (obj)) {\n            const v = obj[k]\n            if (predicate (k, v)) { result[k] = v }\n        }\n\n        return result\n    }\n\n/*  ------------------------------------------------------------------------ */\n\n    class Meta {\n\n        constructor (x) {\n\n            this.assign (x)\n        }\n\n        assign (x) {\n\n            if ('wrapped' in x) { this.wrapped = x.wrapped }\n\n            this.__meta__ = x.__meta__ || {}\n\n            return this\n        }\n\n        [Symbol.for ('String.ify')] (stringify) {\n\n            if (stringify.json) {\n\n                return stringify (this.wrapped)\n            }\n\n            let left = ''\n            let numMeta = 0\n\n            for (let tag in this.__meta__) {\n\n                const name = '$' + tag\n                const value = this.__meta__[tag]\n\n                left = (typeof value === 'boolean')\n                            ? (name + ' (' + left)\n                            : (name + ' (' + stringify.configure ({ pretty: false }) (value) + ', ' + left)\n\n                numMeta++\n            }\n\n            const bullet = require ('string.bullet')\n\n            return bullet (left, stringify (this.wrapped)) + ')'.repeat (numMeta)\n        }\n    }\n\n/*  ------------------------------------------------------------------------ */\n\n    module.exports = O.assign (Meta, {\n\n        new: x => new Meta (x),\n\n        coerce: function (x) { return Meta.is (x) ? x : Meta.new ((arguments.length > 0) ? { wrapped: x } : {}) },\n\n        assign: (x, fields) => (Meta.new (Meta.is (x) ? x : { wrapped: x })).assign (fields),\n\n        is: x => (x && (x['__meta__'] !== undefined)) || false,\n\n        hasValue: x => ('wrapped' in Meta.coerce (x)),\n\n        unwrap: x => Meta.coerce (x).wrapped,\n\n        hasTag: (obj, tag) => Meta.is (obj) && (tag in obj.__meta__),\n\n        readTag: (obj, tag) => Meta.is (obj) ? obj.__meta__[tag] : undefined,\n\n        tags: x => Meta.coerce (x).__meta__,\n\n        eachTag: (x, fn) => {\n            const tags = Meta.tags (x)\n            for (let i in tags) { fn (i, tags[i]) }\n        },\n\n        replaceTags: (x, tags) => Meta.assign (x, { __meta__: tags }),\n\n        setTags: (x, tags) => Meta.replaceTags (x, O.assign ({}, Meta.tags (x), tags)),\n\n        setTag: (name, data, ...toWhat) => Meta.setTags (Meta.coerce (...toWhat), { [name]: data }),\n\n        merge: (a, b) => (Meta.is (a) || Meta.is (b))\n                            ? Meta.replaceTags (b, O.assign ({}, Meta.tags (a), Meta.tags (b)))\n                            : b,\n\n        omitTags (x, ...names) {\n\n            if (!Meta.is (x)) { return x }\n\n            const $names = new Set (names)\n\n            return Meta.replaceTags (x, pickFields (x.__meta__, k => !$names.has (k)))\n        },\n\n        modify: (x, fn) => Meta.merge (x, fn (Meta.unwrap (x))),\n\n        tag: (k, impl) => {\n\n            const defaultImpl = (...args) => (args.length < 2)\n                                                ? Meta.setTag (k, true, ...args) // $tag (value)\n                                                : Meta.setTag (k,       ...args) // $tag (data, value)\n\n            return O.assign ((typeof impl === 'function') ? impl.bind (null, k) : defaultImpl, {\n\n               tagName: k,\n                  read: x =>  Meta.readTag (x, k),\n                    is: x =>  Meta.hasTag  (x, k),\n                 isNot: x => !Meta.hasTag  (x, k),\n            })\n        },\n\n        globalTag: (name, ...args) => {\n\n            const isBrowser = (typeof window !== 'undefined') && (window.window === window) && window.navigator,\n                  globalNamespace = isBrowser ? window : global\n\n            return globalNamespace['$' + name] || (globalNamespace['$' + name] = Meta.tag (name, ...args))\n        },\n    })\n\n/*  ------------------------------------------------------------------------ */\n\n\n"},"lineCount":143}},"error":null,"hash":"77ed2f1d3ae889165fc29eff57f71ab0","cacheData":{"env":{}}}